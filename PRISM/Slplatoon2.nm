mdp

const int max_pos = 1000 * 63;
const min_dist = 5 * 63;
const unsafe_rule = 2*min_dist;

const double mu = 0.9;

const int Pl1 = 5 * 63;
const int Pu1 = 8 * 63;
const int Pl2 = 0 * 63;
const int Pu2 = 2 * 63;

const int w1 = 4 * 63;
const int w2 = 3 * 63;

//global T : [0..T_max] init 0;

//-------------------------------------------------------------------------------
formula is_unsafe = (pow((p1-p2),2) > pow((unsafe_rule),2));
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------
formula is_sorted = (p1>=p2);
//-------------------------------------------------------------------------------

formula is_not_initial = (p1 >= 0) & (p2 >= 0);

module car1

	p1 : [-1..max_pos];

  [initialization] (p1 = -1) -> (p1' = Pl1 + 0);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 3);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 6);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 9);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 12);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 15);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 18);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 21);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 24);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 27);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 30);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 33);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 36);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 39);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 42);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 45);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 48);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 51);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 54);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 57);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 60);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 63);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 66);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 69);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 72);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 75);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 78);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 81);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 84);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 87);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 90);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 93);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 96);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 99);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 102);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 105);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 108);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 111);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 114);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 117);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 120);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 123);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 126);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 129);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 132);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 135);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 138);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 141);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 144);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 147);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 150);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 153);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 156);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 159);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 162);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 165);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 168);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 171);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 174);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 177);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 180);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 183);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 186);
  [initialization] (p1 = -1) -> (p1' = Pl1 + 189);

	[sync1] is_not_initial & (p1<max_pos-w1) & (p2<max_pos-w1) & !is_unsafe & is_sorted-> (p1' = p1 + w1);
	[sync2] is_not_initial & (p1<max_pos-w1) & (p2<max_pos-w1) & is_unsafe & is_sorted-> (p1' = p1);

	[sync3] is_not_initial & !is_sorted & (p2>p1) -> (p1'=p2);

endmodule

//-------------------------------------------------------------------------------
//-------------------------------------------------------------------------------

module car2

	p2 : [-1..max_pos];
  [initialization] (p2 = -1) -> (p2' = Pl2 + 0);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 2);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 4);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 6);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 8);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 10);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 12);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 14);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 16);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 18);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 20);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 22);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 24);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 26);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 28);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 30);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 32);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 34);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 36);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 38);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 40);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 42);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 44);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 46);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 48);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 50);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 52);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 54);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 56);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 58);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 60);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 62);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 64);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 66);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 68);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 70);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 72);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 74);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 76);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 78);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 80);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 82);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 84);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 86);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 88);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 90);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 92);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 94);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 96);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 98);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 100);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 102);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 104);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 106);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 108);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 110);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 112);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 114);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 116);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 118);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 120);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 122);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 124);
  [initialization] (p2 = -1) -> (p2' = Pl2 + 126);

	[sync1] is_not_initial & (p1<max_pos-w1) & (p2<max_pos-w1) & !is_unsafe & is_sorted & (p1 - p2 > min_dist)-> mu : (p2' = p2 + w1) + (1-mu) : (p2' = p2 + w2);
	[sync1] is_not_initial & (p1<max_pos-w1) & (p2<max_pos-w1) & !is_unsafe & is_sorted & (p1 - p2 <= min_dist)-> (1-mu) : (p2' = p2 + w1) + mu : (p2' = p2 + w2);
	[sync2] is_not_initial & (p1<max_pos-w1) & (p2<max_pos-w1) & is_unsafe & is_sorted -> (p2' = p2);

	[sync3] is_not_initial & !is_sorted & (p2>p1) -> (p2'=p1);

endmodule

//-------------------------------------------------------------------------------
//-------------------------------------------------------------------------------

//-------------------------------------------------------------------------------

label "unsafe" = (pow((p1-p2),2) > pow((unsafe_rule),2));
